<?php

declare(strict_types=1);

namespace Abc;

use Nette;

abstract class Class7 extends MyClass implements MyInterface
{
	use Nette\StaticClass;

	public MyClass $foo1;
	public \stdClass $foo2;
	public Nette\Utils\ArrayHash $foo3;

	abstract function abstractFun();

	function emptyFun() {}

	function emptyFun2() {
	}

	function simple(){return 1;}

	function simple2()
	{
		return 1;
	}

	function long()
	{
		// comment
		if ($member instanceof Method) {
			$s = [1, 2, 3];
		}
		/*
		$this->methods[$member->getName()] = $member;
		*/
		throw new Nette\InvalidArgumentException('Argument must be Method|Property|Constant.');
	}

	function complex()
	{
		echo 1;
		// single line comment

    // spaces - indent
        // spaces - indent

		/* multi
		line
		comment */
		if (
			$a
			&&		$b    + $c)
		{}

		/** multi
		line
		comment */
		// Alias Method will not be resolved in comment
		if ($member instanceof Method) {
			$s1 = '
a
	b
		c
';
			$s2 = "
a
	{$b}
		$c
";

			$s3 = <<<DOC
a
	{$b}
		$c
DOC
;
			$s3 = <<<'DOC'
a
	b
		c
DOC
;
		// inline HTML is not supported
			?>
a
	b
		c
			<?php
		}
		throw new Nette\InvalidArgumentException();
	}


	function resolving(MyClass $foo1, \stdClass $foo2, Nette\Utils\ArrayHash $foo3): MyClass
	{
		$x = new MyClass;
		$y = new \stdClass;
		$z = Nette\Utils\ArrayHash::class;
	}
}


class MyClass
{
}

interface MyInterface
{
}
